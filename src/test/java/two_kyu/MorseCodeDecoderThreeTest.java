package two_kyu;

import org.junit.Test;
import six_kyu.MorseCodeDecoder;

import static org.junit.Assert.*;

public class MorseCodeDecoderThreeTest {

    @Test
    public void testHeyJudeBitsToMorse() {
        assertEquals(".... . -.--   .--- ..- -.. .", MorseCodeDecoderThree.decodeBits("00000000110110100111000001100000011111101001111100111111000000000001110111111110111110111110000001011000" +
                "11111100000111110011101100000100000"));
    }

    @Test
    public void testBrownFoxBitsToMorse() {
        assertEquals("- .... .   --.- ..- .. -.-. -.-   -... .-. --- .-- -.   ..-. --- -..-   .--- ..- -- .--. ...   --- ...- . .-.   - .... .   .-.. .- --.. -.--   -.. --- --.", MorseCodeDecoderThree.decodeBits(
                "00000000000000000000000011111110000001101111000111011100000000111000000000000000000111111101111110000110111" +
                        "110000011110011110001111110000000101110000001111111001000111110011000001111110010111110000000000000011111110000111101011000001100" +
                        "011111001000001111111000111111001111111000001000111111000111111110000000111111110111000000000000001011000011111111011110000011111" +
                        "01111100111111111000000001111100101101111100000000000011101111101111101111100000001000100111110000011111011111111000000111001111110" +
                        "001111101000000110000100100000000000000000011111111001111101111110000001000100100001111100000010000000010111110100000000000001111" +
                        "110000001111010000100110000000000111000000000000000110111110111100010000010000111111111000000000111111001111110001110110000011111" +
                        "100001101111100011111100000000000000000111111000010011000001111110111111101111111110000000111111000111110000100000000000000000000" +
                        "0000000000000000000000000000000000000000"));
    }

    @Test
    public void testLongMessageSOSQuick() {
        assertEquals("SOS! THE QUICK BROWN FOX JUMPS OVER THE LAZY DOG.",
                MorseCodeDecoderThree.decodeMorse(MorseCodeDecoderThree.decodeBits("111110000011111110000111111000001111" +
                        "11111111111000011111111111111000000111111111111111100001110000011111100000001111000000000000000" +
                        "01111111111111100000011111000001111111111111110000001111000001111111111111110000111111111111111" +
                        "00000000000000000000000000000000000111111111111111100000000000000011110000001111100000111100000" +
                        "00111100000000000000111110000000000000000000000000000000000011111111111111100000111111111111111" +
                        "00001111100000111111111111110000000000000000111111100000011111100000001111111111111100000000000" +
                        "00000111100000011111000000000000000111111111111111000001111110001111111111111110000111100000000" +
                        "00000000111111111111110000000111100000111111111111110000000000000000000000000000000000011111111" +
                        "11111110000011111100001111100000011111000000000000000111111000011111111111111110000001111000000" +
                        "00000000111111111111111000011111111111111100001111111111111100000000000000011111000000011111111" +
                        "11111110000000111111111111111110000000000000000111111111111111000001111100000000000000000000000" +
                        "00000000000001111000111110000001111111111111111000001110000000000000001111111111111111000001111" +
                        "11111111100000011111111111111110000000000000011111111111111100000011111000011111100000011111111" +
                        "11111111000000000000000000000000000000000011110000011111111111111100000011111111111111100001111" +
                        "11111111111100000000000000111111000111100001111111111110000000000000000111111111111110000001111" +
                        "11111111111000000000000001100000111111111111111000001111111111111111000001111100000000000000011" +
                        "11110000111110000111111000000000000000000000000000000000011111111111111110001111111111111111000" +
                        "00111111111111111100000000000000011110000011111000011110000011111111111111100000000000000011111" +
                        "10000000000000001110000001111111111111110001111000000000000000000000000000000000000111111111111" +
                        "11100000000000000011111110000111100000111111000001111110000000000000001111110000000000000000000" +
                        "00000000000000000011111100011111111111111110000011110000001111111000000000000001111000011111111" +
                        "11111110000000000000111111111111110000011111111111111110000011111000011111000000000000000111111" +
                        "11111111000001111110000011111111111111111000011111111111111100000000000000000000000000000000000" +
                        "00111111111111111100000111111000001111000000000000011111111111111100000111111111111111100001111" +
                        "11111111111100000000000000011111111111111000000111111111111111000001111000000000000000111111000" +
                        "00111111111111110000001110000011111111111111110000011111000011111111111111")));
    }

    @Test
    public void decodeMorse() {
        assertEquals("HEY JUDE", MorseCodeDecoderThree.decodeMorse(".... . -.--   .--- ..- -.. ."));
    }

    @Test
    public void testLongMessage() {
        assertEquals(".... . -.--   .--- ..- -.. .", MorseCodeDecoderThree.decodeBits("1100110011001100000011000000111111001100111111001111110000000000000011001" +
                "111110011111100111111000000110011001111110000001111110011001100000011"));
    }

    @Test
    public void simpleZeroInput() {
        assertEquals("", MorseCodeDecoderThree.decodeBits("0"));
    }

    @Test
    public void testMultipleBitsPerDot() {
        assertEquals(".", MorseCodeDecoderThree.decodeBits("0011100000000"));
    }

    @Test
    public void testShortMessageReturnEE() {
        assertEquals("EE", MorseCodeDecoderThree.decodeMorse(MorseCodeDecoderThree.decodeBits("1001")));
    }

    @Test
    public void testFinalMessage() {
        assertEquals("MGY CQD CQD SOS TITANIC POSITION 41.44 N 50.24 W. REQUIRE IMMEDIATE ASSISTANCE. COME AT ONCE. WE STRUCK AN ICEBERG. SINKING",
                MorseCodeDecoderThree.decodeMorse(MorseCodeDecoderThree.decodeBits("0000000" +
                "0000000011111111000000011111111111100000000000111111111000001111111110100000000111111111111011000011111" +
                "1110111111111110000000000000000000111111111100001100011111111111110001110000000000011111111111100001111" +
                "1111110000110011111111111000000000011111111111101110000111000000000000000000111111111101011111111011000" +
                "0000000000001111111111100001111111111110000100001111111111111100000000000111111111000000011000000111000" +
                "0000000000000000000000000111100011111000001111000000001111111111001111111111001111111111111000000000111" +
                "1001111101111111000000000000000000000011111111111000000001111100000001111100000000111111111111000000000" +
                "1111100011111111000000000111111111110000011000000000111110000000111000000000011111111111111000111001111" +
                "1111110011111100000000000000000000011110001111111111000011111111111111001000000000011111111001111111101" +
                "1111111000000001110111111100011100000000100111111100000000111111111100000000011110000111111100000000000" +
                "0011111111100111111110111111111100000000000111111110000001100000000000000000000111111101010000010000001" +
                "1111111000000000111110001111111110000001111111111100111111110011111111100000000110001111111100001110111" +
                "1111111110000111110000111111110000000000001111001110111000100011111111000000000111100001111111001011000" +
                "1111111111000000000000000000111111111110000000100000000000000000011110111110000001000011101110000000000" +
                "0111111111000000111111111111001111111111110001111111110000011111111000000000000011101111111111110000001" +
                "1001111111111110111000111111111110000000011110000011110000011111111110000011111111111100000001111111100" +
                "0000000001000000111100000001000001111100111111111110000000000000000000010001111111100000011111111100000" +
                "0000000001000011111111111101110011111111111000001111111000011111111110000000000000000000000000111000001" +
                "1111111111101111000000001000000001111111110001111111111110000111000011111111111110000000000000011111000" +
                "0011111001111111100000000000011100011100000000000011111000001111111111101000000001110000000000000000000" +
                "0000000001111100100000000001111111110000111111111100000000001111111111111011111111111000000000100000000" +
                "0000001111111110010000110000000000000011110011110000000000110000000111111111111000000001111111111100000" +
                "0000111100000000000000000000111101111111111111000000000001111000011111000011110000000001100111111100111" +
                "0000000001001110000000000001111100000100000111110000000000000011111111111000000001101111111111000000000" +
                "0000011111111111110000011100000000011111111000111100000011111111011111100000000111100000000001000011111" +
                "1111000011110001111111110111110000111111111111000000000000000000000000111111111110000000111011111111100" +
                "0111111100000000011111111100000111111111001111111100000000011111111111001111111111100000000001100000000" +
                "0000000000100001111111111000000000111111111000000000000000000000001111111111111100000011111111100000111" +
                "1111110000000000111111110000010000000011111111000011111001111111100000001110000000011110000000001011111" +
                "1110000111110111111111100110111111111110000000000000000001000111111111111011111111000000000000000011000" +
                "0000000000000001111001011111000000001111111110000000000111110001111111111110110000000011111000001111000" +
                "0111111111111000000001111111111100001110111111111110111000000000011111111101111100011111111110000000000" +
                "0000000000000000100001111111111000000000011111111101111100000000000000000000001100000111100000000000011" +
                "1111111110011000111111110000001110000000000011111000000001111111111000001111100000111100011000000001110" +
                "0000000000000111100001111111111100000111000000001111111111000000111111111100110000000001111000001111111" +
                "1000111000011111111100000100111111111100000000000000000001111000000111110000011110000000001111110011100" +
                "0000001111111100010000000000001111111100001100111111110000000000011011100000000000011111111111100010000" +
                "0000111111111110000001111111111011100000000000000000000000000")));
    }
}